from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext, CallbackQueryHandler, PollAnswerHandler, PollHandler
from credits import bot_token
from genre import comedy, cartoon, drama, horror, thriller, biography
import random, time

bot = Bot(bot_token)
updater = Updater(bot_token, use_context=True)
dispatcher = updater.dispatcher

pict = ["https://st.depositphotos.com/1653909/1228/i/600/depositphotos_12283193-stock-photo-movie-clapper-and-film-reels.jpg", "https://img.lovepik.com//photo/40010/8993.jpg_860.jpg", "https://www.crushpixel.com/big-static12/preview4/film-movie-background-clapperboard-film-840191.jpg", "https://sharespro.ru/upload/iblock/a1f/home-movie.jpg", "https://cdnimg.rg.ru/img/content/201/78/65/92.jpg"]

def users_from_file(users):
    f = open(users, 'r')
    data = f.read()
    f.close
    return data

def add_users(update, context):
    result = ''
    for arg in context.args:
        result += arg + ' '

    wall = open('users.txt', 'a')
    with open('users.txt') as file:
        search_word = str(update.message.from_user.id)

        if search_word in open('users.txt').read():
            wall.close()
        else:
            wall.write(str(update.message.from_user.id) + '\n')
            wall.close()

def start(update, context):
    keyboard = [['–ñ–∞–Ω—Ä—ã üìñ', '–ù–æ–≤–æ—Å—Ç–∏ üì∞', '–û—Ç–∑—ã–≤—ã üí¨', '–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º ü§î']]
    
    update.message.reply_text("*–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞*", parse_mode = 'Markdown', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

    add_users(update, context)
    
    questions = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ —Ñ–∏–ª—å–º–µ"
    answer = ["–®—É—Ç–∫–∏, –í–µ—Å–µ–ª—å–µ, –ü–æ—à–ª—ã–µ —à—É—Ç–∫–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –î—Ä—É–∑–µ–π, –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
               "–î–æ–±—Ä–æ—Ç—É, –ú—É–ª—å—Ç—è—à–Ω–æ—Å—Ç—å, –•—ç–ø–ø–∏—ç–Ω–¥, –í–æ–ª—à–µ–±—Å—Ç–≤–æ, –°—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤",
               "–î—Ä–∞–∫–∏, –ö—Ä–∏–º–∏–Ω–∞–ª, –ö—Ä–æ–≤—å, –°—Ç—Ä–∞—Ö, –°–ª—ë–∑—ã, –û—Å—Ç—Ä—ã–π —Å—é–∂–µ—Ç, –û—Ä—É–∂–∏–µ, –ú–∞–Ω—å—è–∫–∏",
               "–°–ª—ë–∑—ã, –õ—é–±–æ–≤—å, –ì–æ—Ä–µ, –ú–æ—Ç–∏–≤–∞—Ü–∏—é, –ü–æ—Ü–µ–ª—É–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –ì—Ä—É—Å—Ç—å",
               "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è, –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –ü–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –î–µ–Ω—å–≥–∏, –í–ª–∞—Å—Ç—å"] 
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç
    message = context.bot.send_poll(
        update.effective_chat.id, questions, answer,
        is_anonymous=False, allows_multiple_answers=True,
    )
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–ø—Ä–æ—Å–∞ –≤ `bot_data` –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ 
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `receive_poll_answer`
    payload = { # –∫–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥–µ—Ç `id` –æ–ø—Ä–æ—Å–∞
        message.poll.id: {
            "questions": questions,
            "message_id": message.message_id,
            "chat_id": update.effective_chat.id,
            "answers": 0,
        }
    }
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ `bot_data`
    context.bot_data.update(payload)
    print(payload)

def answer(update, context):
    update.message.reply_text("*–ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞*", parse_mode = 'Markdown', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

    add_users(update, context)
    
    questions = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ —Ñ–∏–ª—å–º–µ"
    answer = ["–®—É—Ç–∫–∏, –í–µ—Å–µ–ª—å–µ, –ü–æ—à–ª—ã–µ —à—É—Ç–∫–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –î—Ä—É–∑–µ–π, –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
               "–î–æ–±—Ä–æ—Ç—É, –ú—É–ª—å—Ç—è—à–Ω–æ—Å—Ç—å, –•—ç–ø–ø–∏—ç–Ω–¥, –í–æ–ª—à–µ–±—Å—Ç–≤–æ, –°—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤",
               "–î—Ä–∞–∫–∏, –ö—Ä–∏–º–∏–Ω–∞–ª, –ö—Ä–æ–≤—å, –°—Ç—Ä–∞—Ö, –°–ª—ë–∑—ã, –û—Å—Ç—Ä—ã–π —Å—é–∂–µ—Ç, –û—Ä—É–∂–∏–µ, –ú–∞–Ω—å—è–∫–∏",
               "–°–ª—ë–∑—ã, –õ—é–±–æ–≤—å, –ì–æ—Ä–µ, –ú–æ—Ç–∏–≤–∞—Ü–∏—é, –ü–æ—Ü–µ–ª—É–∏, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –ì—Ä—É—Å—Ç—å",
               "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è, –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –ü–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –î–µ–Ω—å–≥–∏, –í–ª–∞—Å—Ç—å"] 
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç
    message = context.bot.send_poll(
        update.effective_chat.id, questions, answer,
        is_anonymous=False, allows_multiple_answers=True,
    )
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–ø—Ä–æ—Å–∞ –≤ `bot_data` –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ 
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `receive_poll_answer`
    payload = { # –∫–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥–µ—Ç `id` –æ–ø—Ä–æ—Å–∞
        message.poll.id: {
            "questions": questions,
            "message_id": message.message_id,
            "chat_id": update.effective_chat.id,
            "answers": 0,
        }
    }
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ `bot_data`
    context.bot_data.update(payload)
    print(payload)

def receive_poll_answer(update, context):
#    """–ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    answer = update.poll_answer
    poll_id = answer.poll_id
    user = context.bot_data[poll_id]["chat_id"]
    results = update.poll_answer.option_ids
    print(poll_id, results)
    if 0 in results:
        context.bot.send_photo(user, random.choice(pict),caption = "–í–∞–º –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–∏–ª—å–º\n" + random.choice(comedy), parse_mode = 'Markdown')
        time.sleep(1)
    if 1 in results:
        context.bot.send_photo(user, random.choice(pict),caption = "–í–∞–º –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–∏–ª—å–º\n" + random.choice(cartoon), parse_mode = 'Markdown')
        time.sleep(1)
    if 2 in results:
        context.bot.send_photo(user, random.choice(pict),caption = "–í–∞–º –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–∏–ª—å–º\n" + random.choice(thriller), parse_mode = 'Markdown')
        time.sleep(1)
    if 3 in results:
        context.bot.send_photo(user, random.choice(pict),caption = "–í–∞–º –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–∏–ª—å–º\n" + random.choice(drama), parse_mode = 'Markdown')
        time.sleep(1)
    if 4 in results:
        context.bot.send_photo(user, random.choice(pict),caption = "*–í–∞–º –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–∏–ª—å–º*\n" + random.choice(biography), parse_mode = 'Markdown')
        time.sleep(1)
  

def genre(update, context):
    keyboard = [[InlineKeyboardButton('–£–∂–∞—Å—ã üò®', callback_data='1'), InlineKeyboardButton('–¢—Ä–∏–ª–ª–µ—Ä üî™', callback_data='2')],
                [InlineKeyboardButton('–ö–æ–º–µ–¥–∏–∏ üòÄ', callback_data='3'), InlineKeyboardButton('–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã üß∏', callback_data='4')],
                [InlineKeyboardButton('–ì–∞–Ω–≥—Å—Ç–µ—Ä—ã\n üö¨', callback_data='5'), InlineKeyboardButton('–î—Ä–∞–º–∞ üò≠', callback_data='6')]]

    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞', reply_markup = InlineKeyboardMarkup(keyboard))

def message(update, context):
    if update.message.text == "–ñ–∞–Ω—Ä—ã üìñ":
        genre(update, context)
    if update.message.text == "–ù–æ–≤–æ—Å—Ç–∏ üì∞":
        new(update, context)
    if update.message.text == "–û—Ç–∑—ã–≤—ã üí¨":
        lists(update, context)
    if update.message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º ü§î":
        answer(update, context)

def genre_from_file(genre):
    f = open(genre, 'r')
    data = f.read()
    f.close
    return data

def button(update, context):
    query = update.callback_query
    query.answer()
    if query.data == '1':
            context.bot.send_message(update.effective_chat.id, genre_from_file('horror.txt'))
    elif query.data == '2':
            context.bot.send_message(update.effective_chat.id, genre_from_file('thriller.txt'))
    elif query.data == '3':
            context.bot.send_message(update.effective_chat.id, genre_from_file('comedy.txt'))
    elif query.data == '4':
            context.bot.send_message(update.effective_chat.id, genre_from_file('cartoon.txt'))
    elif query.data == '5':
            context.bot.send_message(update.effective_chat.id, genre_from_file('gangster_movie.txt'))
    elif query.data == '6':
            context.bot.send_message(update.effective_chat.id, genre_from_file('drama.txt'))
    else:
        context.bot.send_message(update.effective_chat.id, "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞")

def new(update, context):
    context.bot.send_message(update.effective_chat.id, "*–û—Ö–æ—Ç–Ω–∏–∫–∏ –∑–∞ –ø—Ä–∏–≤–∏–¥–µ–Ω–∏—è–º–∏: –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏* - 18 –Ω–æ—è–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–ù–µ–±–æ* - 18 –Ω–æ—è–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–≠–Ω–∫–∞–Ω—Ç–æ* - 25 –Ω–æ—è–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–û–±–∏—Ç–µ–ª—å –ó–ª–∞: –†–∞–∫–∫—É–Ω –°–∏—Ç–∏* - 2 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–ú–µ—Å—Ç—å –∑–µ–º–ª–∏* - 2 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–î–µ–Ω—å –º—ë—Ä—Ç–≤—ã—Ö* - 2 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–ë—É–∫–∞. –ú–æ—ë –ª—é–±–∏–º–æ–µ —á—É–¥–∏—â–µ* - 9 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–ú–∞–∂–æ—Ä –Ω–∞ –º–µ–ª–∏* - 9 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥—å—è–≤–æ–ª–∞* - 9 –¥–µ–∫–∞–±—Ä—è 2021–≥–æ–¥–∞\
                                                                                                                                            *–ó–≤–µ—Ä–æ–ø–æ–π 2* - 23 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞\
                                                                                                                                            *–î–µ—Å—è—Ç—å –¥–Ω–µ–π —Å –°–∞–Ω—Ç–æ–π* - 30 –¥–µ–∫–∞–±—Ä—è 2021 –≥–æ–¥–∞", parse_mode = 'Markdown')
def wall_from_file(wall):
    f = open(wall, 'r')
    data = f.read()
    f.close
    return data

def add(update, context):
    result = ''
    for arg in context.args:
        result += arg + ' '

    wall = open('wall.txt', 'a')
    wall.write(str(update.message.from_user['username']) + ": " + result + '\n')
    wall.close()

def lists(update, context):
    context.bot.send_message(update.effective_chat.id, wall_from_file("wall.txt"))
    
def users(update, context):
    context.bot.send_message(update.effective_chat.id, wall_from_file("users.txt"))


start_handler = CommandHandler('start', start)
new_handler = CommandHandler('new', new)
genre_handler = CommandHandler('genre', genre)
button_handler = CallbackQueryHandler(button)
add_handler = CommandHandler('add', add)
list_handler = CommandHandler('list', lists)
users_handler = CommandHandler('users', users)
message_handler = MessageHandler(Filters.text, message)



dispatcher.add_handler(PollAnswerHandler(receive_poll_answer))
dispatcher.add_handler(start_handler)
dispatcher.add_handler(genre_handler)
dispatcher.add_handler(button_handler)
dispatcher.add_handler(new_handler)
dispatcher.add_handler(add_handler)
dispatcher.add_handler(list_handler)
dispatcher.add_handler(users_handler)
dispatcher.add_handler(message_handler)


updater.start_polling()
updater.idle()